##TWITTER
client_twitter_id <- "KxmCJDmGHiVmhgsDXu0Xx1Sv4"
client_twitter_secret <- "PiBV4GvJE3xDDWLmwT6IVKiCVuJS00hVF8MdmXoUUGd6BsHY41"
twitter_token <- "3346559890-NSSgoOv1djcSTEp24Ksw7AbhqdXms5ELbAdzb2K"
HeaderValue = paste0('Bearer ', twitter_token)
response = POST(
'https://api.twitter.com/token',
accept_json(),
authenticate(client_twitter_id, client_twitter_secret),
body = list(grant_type = 'client_credentials'),
encode = 'form',
verbose()
)
##token = content(response)$access_token
twitter_token <- "3346559890-NSSgoOv1djcSTEp24Ksw7AbhqdXms5ELbAdzb2K"
HeaderValue = paste0('Bearer ', twitter_token)
consumer_key <- "KxmCJDmGHiVmhgsDXu0Xx1Sv4"
consumer_secret <- "PiBV4GvJE3xDDWLmwT6IVKiCVuJS00hVF8MdmXoUUGd6BsHY41"
access_token <- "3346559890-NSSgoOv1djcSTEp24Ksw7AbhqdXms5ELbAdzb2K"
access_secret <- "YjFoU1dDeIl93cNb6jislPaCdlniwHaFVqg3n83VFIhLw"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
##doit <- function(i) {
##i
## connect to Twitter
##origop <- options("httr_oauth_cache")
##options(httr_oauth_cache=TRUE)
##setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
##options(httr_oauth_cache=origop)
##i
}
##doit
final2$Primary_Artist <- gsub(",.*$", "", final2$`ARTIST NAME`)
final2$Primary_Artist1 <- gsub(" ", " + ", final2$Primary_Artist, fixed=TRUE)
newdf1<-data.frame(unique(final2[,6]))
newdf2<-data.frame(unique(final2[,1]))
newdf2[,1]<-gsub("\\[|\\]", "", newdf2[,1])
colnames(newdf2)[1]<-"Songs"
##DUMMY DATAFRAME
text = c("This is neutral")
Col2 = 0
Col3 = 0
Col4 = 0
Col5 = 0
Col6 = 0
Col7 = 0
Col8 = 0
Col9 = 0
Col10 = 0
Col11 = 0
Col12 = 0
Col13 = 0
Col14 = 0
Col15 = 0
Col16 = 0
df = data.frame(text, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, Col16)
library(dplyr)
for(i in 1:length(newdf1[,1])) {
newdf <- searchTwitter(as.character(newdf1[i,1]), n=1000)
twitterdf <- if(length(newdf)==0) {df} else {twListToDF(newdf)}
twitterdf <- dplyr::select(twitterdf, text)
twitterdf <- unique(twitterdf)
twitterdf$filtered = gsub("&amp", "", twitterdf$text)
twitterdf$filtered = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", twitterdf$filtered)
twitterdf$filtered = gsub("@\\w+", "", twitterdf$filtered)
twitterdf$filtered = gsub("[[:punct:]]", "", twitterdf$filtered)
twitterdf$filtered = gsub("[[:digit:]]", "", twitterdf$filtered)
twitterdf$filtered = gsub("http\\w+", "", twitterdf$filtered)
twitterdf$filtered = gsub("[ \t]{2,}", "", twitterdf$filtered)
twitterdf$filtered = gsub("^\\s+|\\s+$", "", twitterdf$filtered)
twitterdf$filtered <- sapply(twitterdf$filtered,function(row) iconv(row, "latin1", "ASCII", sub=""))
twitterdf$filtered <- sapply(newdf2$Songs,function(w) twitterdf$filtered <<- gsub(paste0(w,"|",tolower(w)),"it",twitterdf$filtered))
testing<-data.frame(twitterdf$filtered)
testing1<-data.frame(testing[,ncol(testing)])
colnames(testing1)[1]<-"Tweets"
testing1$Tweets<-as.character(testing1$Tweets)
testing1$sentiment1<-data.frame(get_sentiment(testing1[,1]))
answer1<-mean(testing1$sentiment1$get_sentiment.testing1...1..)
newdf1[i,2] <- answer1
}
withsentiment <- left_join(final2,newdf1,by=c("Primary_Artist1"="unique.final2...6.."))
sentiment_filtered <- withsentiment[,c(1,2,3,4,7)]
colnames(sentiment_filtered)[5] <- "Recent Twitter Sentiment"
colnames(sentiment_filtered)[4] <- "Twitter Name"
sentiment_filtered$`Recent Twitter Sentiment`<-as.numeric(sentiment_filtered$`Recent Twitter Sentiment`)
setwd("~/website/r-projects")
write_csv(sentiment_filtered,"testing.csv")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/website/r-projects")
##install.packages('rmarkdown')
library(rmarkdown)
#render your sweet site.
rmarkdown::render_site()
shiny::runApp('~/Interactive Song Clustering')
spotifyKey <- "c432b36c21724d2989baf7d4d8a6bfd3"
spotifySecret <- "047d74d4926c44ec8681c236d702dff9"
library("httr")
library("jsonlite")
library(ggplot2)
library(scales)
library(dplyr)
library(ggthemes)
response = POST(
'https://accounts.spotify.com/api/token',
accept_json(),
authenticate(spotifyKey, spotifySecret),
body = list(grant_type = 'client_credentials'),
encode = 'form',
verbose()
)
token = content(response)$access_token
HeaderValue = paste0('Bearer ', token)
get.artist <- function(spotify){
artistnameURL <- paste("https://api.spotify.com/v1/search?q=", spotify, "&type=artist", sep="")
getArtist <- GET(artistnameURL, add_headers(Authorization = HeaderValue))
artistname <- jsonlite::fromJSON(toJSON(content(getArtist)))
ids <- data.frame(matrix(unlist(artistname$artists$items$id),
nrow=artistname$artists$total,
byrow=T),stringsAsFactors=FALSE)
names <- data.frame(matrix(unlist(artistname$artists$items$name),
nrow=artistname$artists$total,
byrow=T),stringsAsFactors=FALSE)
colnames(ids)[1]<-"Artist ID"
colnames(names)[1]<-"Artist Name"
artist_search <- cbind(names, ids)
artist_search <- artist_search[1,]
return(artist_search)
}
get.albums <- function(ids){
artists_albumsURL <- paste("https://api.spotify.com/v1/artists/", ids, "/albums", sep="")
getArtistAlbum <- GET(artists_albumsURL, add_headers(Authorization = HeaderValue))
artistalbumname <- jsonlite::fromJSON(toJSON(content(getArtistAlbum)))
albumids <- data.frame(matrix(unlist(artistalbumname$items$id),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
albumnames <- data.frame(matrix(unlist(artistalbumname$items$name),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
artistid2 <- data.frame(matrix(unlist(artistalbumname$items$artists[[1]]$id),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
artistname2 <-
data.frame(matrix(unlist(artistalbumname$items$artists[[1]]$name),
nrow=artistalbumname$total, byrow=T),stringsAsFactors=FALSE)
colnames(albumids)[1]<-"Album IDs"
colnames(albumnames)[1]<-"Album Name"
colnames(artistid2)[1]<-"Artist ID"
colnames(artistname2[1])<-"Artist Name"
album_search <- cbind(artistid2, artistname2, albumnames, albumids)
album_search <- unique(album_search)
return(album_search)
}
get.tracks <- function(spotify){
albumTracksURL <- paste("https://api.spotify.com/v1/albums/", spotify, "/tracks?limit=50", sep="")
getTracks <- GET(albumTracksURL, add_headers(Authorization = HeaderValue))
albumTracks <- jsonlite::fromJSON(toJSON(content(getTracks)))
ids <- data.frame(matrix(unlist(albumTracks$items$id),
nrow=albumTracks$total, byrow=T),stringsAsFactors=FALSE)
names <- data.frame(matrix(unlist(albumTracks$items$name),
nrow=albumTracks$total, byrow=T),stringsAsFactors=FALSE)
artists<-albumTracks$items$artists
artists1<-do.call(rbind, lapply(artists, function(x) do.call(cbind, lapply(x[c('id', 'name')], toString))))
result <- cbind(ids, names, artists1)
colnames(result) <- c("ID", "NAME", "ARTIST ID", "ARTIST NAME")
result$AlbumID <- spotify
return(result)
}
server <- function(input, output, session) {
ids <- reactive({
randomVals <- eventReactive(input$goButton, c(input$albumId, input$albumId1))
spotify1 <- c(randomVals())
spotify <- gsub(" ", "%20", spotify1, fixed=TRUE)
df1 <- lapply(spotify, get.artist)
result2 <- do.call(rbind, df1)
result2_final<-result2
result2_final$`Artist ID`
})
result_final <- reactive({
df <- lapply(ids(), get.albums)
result <- do.call(rbind, df)
colnames(result)[2]<-"Artist Name"
result
})
# Observes and updates album selection part
observe({
albums <- unique(result_final()$`Album Name`)
updateSelectInput(session, "selectinputid",
label = "Album(S) Selected:",
choices = albums,
selected = albums[1])
})
variable <- reactive({
spotify<-result_final()$`Album IDs`
df <- lapply(spotify, get.tracks)
result <- do.call(rbind, df)
result_final2<-result
names(result_final2) <- c("ID", "NAME", "ARTIST ID", "ARTIST NAME")
final<-result_final2
final1<-final[!duplicated(final), ]
final2 <- final1[!duplicated(final1[2:5]),]
colnames(final2)[5]<-"Album ID"
with_album_name<-left_join(final2,result_final(), by=c("Album ID" = "Album IDs"))
with_album_name <- with_album_name[,-c(6:7)]
##Get Number of Tracks By Album Name
track_count_by_album <- with_album_name %>%
group_by(`Album ID`)%>%
summarise(y = length(NAME))
with_album_name1<-left_join(with_album_name,track_count_by_album, by=c("Album ID" = "Album ID"))
max_album_tracks <- with_album_name1 %>%
group_by(`Album Name`)%>%
summarise(`Number of Tracks` = max(y))
with_album_name2<-left_join(with_album_name1,max_album_tracks, by=c("Album Name" = "Album Name"))
with_album_name2$Match <- ifelse(with_album_name2$y == with_album_name2$`Number of Tracks`, "TRUE", "FALSE")
with_album_name2<-filter(with_album_name2, Match=="TRUE")
with_albume_name2 <- with_album_name2[!duplicated(with_album_name2[c(2,4,6)]),]
with_albume_name2 <- with_albume_name2[,-c(7,9)]
randomVals2 <- eventReactive(input$goButton1, input$selectinputid)
target <- c(randomVals2())
result_final<-filter(with_albume_name2, `Album Name` %in% target)
final2<-result_final
for(i in 1:length(final2[,1])) {
audioFeaturesURL <- paste("https://api.spotify.com/v1/audio-features/",
final2[i,1],
sep="")
getaudioFeatures <- GET(audioFeaturesURL, add_headers(Authorization = HeaderValue))
audioFeatures <- jsonlite::fromJSON(toJSON(content(getaudioFeatures)))
final2[i,8] <- audioFeatures$danceability
final2[i,9] <- audioFeatures$energy
final2[i,10] <- audioFeatures$key
final2[i,11] <- audioFeatures$loudness
final2[i,12] <- audioFeatures$mode
final2[i,13] <- audioFeatures$speechiness
final2[i,14] <- audioFeatures$acousticness
final2[i,15] <- audioFeatures$instrumentalness
final2[i,16] <- audioFeatures$liveness
final2[i,17] <- audioFeatures$valence
final2[i,18] <- audioFeatures$tempo
final2[i,19] <- audioFeatures$duration_ms
final2[i,20] <- audioFeatures$time_signature
}
colnames(final2)[8]<-"Danceability"
colnames(final2)[9]<-"Energy"
colnames(final2)[10]<-"Key"
colnames(final2)[11]<-"Loudness"
colnames(final2)[12]<-"Mode"
colnames(final2)[13]<-"Speechiness"
colnames(final2)[14]<-"Acousticness"
colnames(final2)[15]<-"Instrumentalness"
colnames(final2)[16]<-"Liveness"
colnames(final2)[17]<-"Valence"
colnames(final2)[18]<-"Tempo"
colnames(final2)[19]<-"Duration (ms)"
colnames(final2)[20]<-"Time Signature"
final10<-final2[complete.cases(final2), ]
final10
})
variable2 <- reactive({
randomVals3 <- eventReactive(input$goButton2, c(input$selectinputid2, input$selectinputid3))
target <- c(randomVals3())
target
})
variable3 <- reactive({
df2 <- subset(variable(), select = variable2())
final11<- select(variable(), NAME, `ARTIST NAME`, `Album Name`)
df2 <- cbind(final11, df2)
df2
})
##df2
##randomVals3 <- eventReactive(input$goButton2, c(input$selectinputid2, input$selectinputid3))
##target1 <- c(randomVals3())
##final11 <- select(final10, target1)
##final11
variable4 <- reactive({
irisCluster <- kmeans(variable3()[, variable2()], input$slider1, nstart = 20)
irisCluster$cluster <- as.factor(irisCluster$cluster)
##ggplot(df2, aes(Danceability, Key, color = irisCluster$cluster)) + geom_point()+geom_text(aes(label=df2$NAME), size=5)
irisCluster$cluster
})
output$result <- renderPlot({
df11<-data.frame(variable3())
df12<-variable4()
ggplot(df11, aes_q(x = as.name(names(df11)[4]),y = as.name(names(df11)[5]), color = df12)) + geom_point()+geom_text(aes(label=df11$NAME), size=4)+labs(color = "Cluster Number")+ggtitle("Song Clusters By Audio Attributes") + theme_gdocs() + scale_color_gdocs()
}, height = 600)
output$table1 <- DT::renderDataTable({
df11<-data.frame(variable3())
df12 <- as.data.frame(variable4())
df13 <- cbind(df12,df11)
colnames(df13)[1]<-"Cluster Number"
colnames(df13)[2]<-"Track Name"
colnames(df13)[3]<-"Artist"
colnames(df13)[4]<-"Album"
df13 <- df13[order(df13$`Cluster Number`),]
datatable(df13, extensions = 'Buttons', options = list(
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#09e53c', 'color': '#000000'});",
"}"),
pageLength = 100,
dom = 'Bfrtip',
buttons =
list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
)
)
})
output$table2 <- DT::renderDataTable({
KEY <- c("acousticness", "danceability", "duration_ms", "energy", "instrumentalness", "key", "liveness", "loudness", "mode", "speechiness", "tempo", "valence")
`VALUE DESCRIPTION` <- c("A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.",
"Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.",
"The duration of the track in milliseconds.",
"Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.",
"Predicts whether a track contains no vocals. Ooh and aah sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly vocal. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.",
"The key the track is in. Integers map to pitches using standard Pitch Class notation. (0 = C, 1 = C#, 2 = D, 3 = D#, 4 = E, 5 = F, 6 = F#, 7 = G, 8 = G#, 9 = A, 10 = A#, 11 = B) URL: https://en.wikipedia.org/wiki/Pitch_class",
"Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.",
"The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.",
"Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.",
"Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.",
"The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.",
"A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).")
df<-data.frame(KEY, `VALUE DESCRIPTION`)
datatable(df,
options = list(
pageLength = 100))
})
}
shinyApp(ui, server, options = list(height = 100))
spotify <- c("Adele", "Logic")
df1 <- lapply(spotify, get.artist)
result2 <- do.call(rbind, df1)
result2_final<-result2
View(result2)
result2_final$`Artist ID`
artistnameURL <- paste("https://api.spotify.com/v1/search?q=", "Adele", "&type=artist", sep="")
getArtist <- GET(artistnameURL, add_headers(Authorization = HeaderValue))
artistname <- jsonlite::fromJSON(toJSON(content(getArtist)))
ids <- data.frame(matrix(unlist(artistname$artists$items$id),
nrow=artistname$artists$total,
byrow=T),stringsAsFactors=FALSE)
names <- data.frame(matrix(unlist(artistname$artists$items$name),
nrow=artistname$artists$total,
byrow=T),stringsAsFactors=FALSE)
colnames(ids)[1]<-"Artist ID"
colnames(names)[1]<-"Artist Name"
artist_search <- cbind(names, ids)
artist_search <- artist_search[1,]
View(artist_search)
View(ids)
View(artist_search)
ids <- data.frame(matrix(unlist(artistname$artists$items$id),
nrow=artistname$artists$total,
byrow=T),stringsAsFactors=FALSE)
nrow=artistname$artists$total
unlist(artistname$artists$items$id)
matrix(unlist(artistname$artists$items$id)
ids <- data.frame(matrix(unlist(artistname$artists$items$id),
nrow=artistname$artists$total,
byrow=T),stringsAsFactors=FALSE)
names <- data.frame(matrix(unlist(artistname$artists$items$name),
nrow=artistname$artists$total,
byrow=T),stringsAsFactors=FALSE)
colnames(ids)[1]<-"Artist ID"
colnames(names)[1]<-"Artist Name"
artist_search <- cbind(names, ids)
ids <- data.frame(matrix(unlist(artistname$artists$items$id),
nrow=artistname$artists$total,
byrow=T),stringsAsFactors=FALSE)
names <- data.frame(matrix(unlist(artistname$artists$items$name),
nrow=artistname$artists$total,
byrow=T),stringsAsFactors=FALSE)
colnames(ids)[1]<-"Artist ID"
colnames(names)[1]<-"Artist Name"
artist_search <- cbind(names, ids)
View(artist_search)
artist_search <- artist_search[1,]
View(artist_search)
View(artist_search)
artists_albumsURL <- paste("https://api.spotify.com/v1/artists/", "4dpARuHxo51G3z768sgnrY", "/albums", sep="")
getArtistAlbum <- GET(artists_albumsURL, add_headers(Authorization = HeaderValue))
artistalbumname <- jsonlite::fromJSON(toJSON(content(getArtistAlbum)))
albumids <- data.frame(matrix(unlist(artistalbumname$items$id),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
albumnames <- data.frame(matrix(unlist(artistalbumname$items$name),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
artistid2 <- data.frame(matrix(unlist(artistalbumname$items$artists[[1]]$id),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
artistname2 <-
data.frame(matrix(unlist(artistalbumname$items$artists[[1]]$name),
nrow=artistalbumname$total, byrow=T),stringsAsFactors=FALSE)
colnames(albumids)[1]<-"Album IDs"
colnames(albumnames)[1]<-"Album Name"
colnames(artistid2)[1]<-"Artist ID"
colnames(artistname2[1])<-"Artist Name"
album_search <- cbind(artistid2, artistname2, albumnames, albumids)
album_search <- unique(album_search)
View(album_search)
spotify <- c("Adele", "Logic")
df1 <- lapply(spotify, get.artist)
result2 <- do.call(rbind, df1)
result2_final<-result2
result2_final$`Artist ID`
df <- lapply(ids(), get.albums)
df <- lapply(c("4dpARuHxo51G3z768sgnrY" "4xRYI6VqpkE3UwrDrAZL8L"), get.albums)
df <- lapply(c("4dpARuHxo51G3z768sgnrY", "4xRYI6VqpkE3UwrDrAZL8L"), get.albums)
result <- do.call(rbind, df)
colnames(result)[2]<-"Artist Name"
result
View(result)
albums <- unique(result$`Album Name`)
albums
df <- lapply(c("4dpARuHxo51G3z768sgnrY", "4xRYI6VqpkE3UwrDrAZL8L"), get.albums)
result <- do.call(rbind, df)
View(result)
colnames(result)[2]<-"Artist Name"
result
artists_albumsURL <- paste("https://api.spotify.com/v1/artists/", "4dpARuHxo51G3z768sgnrY", "/albums", sep="")
getArtistAlbum <- GET(artists_albumsURL, add_headers(Authorization = HeaderValue))
artistalbumname <- jsonlite::fromJSON(toJSON(content(getArtistAlbum)))
albumids <- data.frame(matrix(unlist(artistalbumname$items$id),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
albumnames <- data.frame(matrix(unlist(artistalbumname$items$name),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
artistid2 <- data.frame(matrix(unlist(artistalbumname$items$artists[[1]]$id),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
artistname2 <-
data.frame(matrix(unlist(artistalbumname$items$artists[[1]]$name),
nrow=artistalbumname$total, byrow=T),stringsAsFactors=FALSE)
colnames(albumids)[1]<-"Album IDs"
colnames(albumnames)[1]<-"Album Name"
colnames(artistid2)[1]<-"Artist ID"
colnames(artistname2[1])<-"Artist Name"
album_search <- cbind(artistid2, artistname2, albumnames, albumids)
album_search <- unique(album_search)
album_search
album_search
artists_albumsURL <- paste("https://api.spotify.com/v1/artists/", "4xRYI6VqpkE3UwrDrAZL8L", "/albums", sep="")
getArtistAlbum <- GET(artists_albumsURL, add_headers(Authorization = HeaderValue))
artistalbumname <- jsonlite::fromJSON(toJSON(content(getArtistAlbum)))
albumids <- data.frame(matrix(unlist(artistalbumname$items$id),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
albumnames <- data.frame(matrix(unlist(artistalbumname$items$name),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
artistid2 <- data.frame(matrix(unlist(artistalbumname$items$artists[[1]]$id),
nrow=artistalbumname$total,
byrow=T),stringsAsFactors=FALSE)
artistname2 <-
data.frame(matrix(unlist(artistalbumname$items$artists[[1]]$name),
nrow=artistalbumname$total, byrow=T),stringsAsFactors=FALSE)
colnames(albumids)[1]<-"Album IDs"
colnames(albumnames)[1]<-"Album Name"
colnames(artistid2)[1]<-"Artist ID"
colnames(artistname2[1])<-"Artist Name"
album_search <- cbind(artistid2, artistname2, albumnames, albumids)
View(album_search)
artistalbumname
albumids
albumnames
artists_albumsURL <- paste("https://api.spotify.com/v1/artists/", "4xRYI6VqpkE3UwrDrAZL8L", "/albums", sep="")
getArtistAlbum <- GET(artists_albumsURL, add_headers(Authorization = HeaderValue))
artistalbumname <- jsonlite::fromJSON(toJSON(content(getArtistAlbum)))
artistalbumname
album_search
album_search <- unique(album_search)
album_search
library(fuzzyjoin)
install.packages('fuzzyjoin')
library(fuzzyjoin)
devtools::install_github("dgrtwo/fuzzyjoin")
library(fuzzyjoin)
date <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14'))
site <- c("abcejams.com", "reitimes.com", "posehbc")
df1 <- data.frame(date, site, stringsAsFactors = FALSE)
date2 <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14', '2018-2-9'))
site2 <- c("jams", "time", "pose", "abce")
metric2 <- c(1, 2, 3, 4)
metric3 <- c(10, 20, 30, 40)
df2 <- data.frame(date2, site2, metric2, metric3, stringsAsFactors = FALSE)
View(df1)
View(df2)
regex_full_join(df1, df2, by = c("site" = "site2", "date" = "date2"))
df1
df2
str(df1)
str(df2)
regex_full_join(df1, df2, by = c("site" = "site2", "date" = "date2"))
df1$site<-as.character(df1$site)
df2$site2<-as.character(df2$site2)
regex_full_join(df1, df2, by = c("site" = "site2", "date" = "date2"))
library(fuzzyjoin)
date <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14'))
site <- c("abcejams.com", "reitimes.com", "posehbc")
df1 <- data.frame(date, site, stringsAsFactors = FALSE)
df1$site<-as.character(df1$site)
date2 <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14', '2018-2-9'))
site2 <- c("jams", "time", "pose", "abce")
metric2 <- c(1, 2, 3, 4)
metric3 <- c(10, 20, 30, 40)
df2 <- data.frame(date2, site2, metric2, metric3, stringsAsFactors = FALSE)
df2$site2<-as.character(df2$site2)
regex_full_join(df1, df2, by = c("site" = "site2", "date" = "date2"))
