library(RDCOMClient)
outlook_app <- COMCreate("Outlook.Application")
search <- outlook_app$AdvancedSearch(
"Inbox",
"urn:schemas:httpmail:subject = 'DDM Report #107047216 : \"Nick_ACS_Brand_All_FloodLights3\" from Nicholas Knauer'"
)
results <- search$Results() # Saves search results into results object
Sys.sleep(5) # Wait a hot sec!
results$Item(1)$ReceivedTime() # Received time of first search result
as.Date("1899-12-30") + floor(results$Item(1)$ReceivedTime()) # Received date
# Iterates through results object to pull out all of the items
for (i in 1:results$Count()) {
if (as.Date("1899-12-30") + floor(results$Item(i)$ReceivedTime())
== as.Date(Sys.Date())) {
email <- results$Item(i)
}
}
attachment_file <- tempfile()
email$Attachments(1)$SaveAsFile(attachment_file)
data <- read.table(unz(attachment_file,"94602_Nick_ACS_Brand_All_FloodLights_20171217_111320_653491298.csv"), skip = 10, nrows=10, header=T, quote="\"", sep=",")
library(RDCOMClient)
outlook_app <- COMCreate("Outlook.Application")
search <- outlook_app$AdvancedSearch(
"Inbox",
"urn:schemas:httpmail:subject = 'DDM Report #107047216 : \"Nick_ACS_Brand_All_FloodLights3\" from Nicholas Knauer'"
)
results <- search$Results() # Saves search results into results object
Sys.sleep(5) # Wait a hot sec!
results$Item(1)$ReceivedTime() # Received time of first search result
as.Date("1899-12-30") + floor(results$Item(1)$ReceivedTime()) # Received date
# Iterates through results object to pull out all of the items
for (i in 1:results$Count()) {
if (as.Date("1899-12-30") + floor(results$Item(i)$ReceivedTime())
== as.Date(Sys.Date())) {
email <- results$Item(i)
}
}
attachment_file <- tempfile()
email$Attachments(1)$SaveAsFile(attachment_file)
data <- read.table(unz(attachment_file,"94602_Nick_ACS_Brand_All_FloodLights_20171217_111320_653491298.csv"), skip = 10, nrows=10, header=T, quote="\"", sep=",")
data <- read.table(unz(attachment_file,"94602_Nick_ACS_Brand_All_FloodLights_20171217_111320_653491298.csv"), header=T, quote="\"", sep=",")
data <- read.table(unz(attachment_file,"94602_Nick_ACS_Brand_All_FloodLights_20171217_111320_653491298.csv"), skip = 10, header=T, quote="\"", sep=",")
View(data)
str(data)
library(RDCOMClient)
outlook_app <- COMCreate("Outlook.Application")
search <- outlook_app$AdvancedSearch(
"Inbox",
"urn:schemas:httpmail:subject = 'DDM Report #107047216 : \"Nick_ACS_Brand_All_FloodLights3\" from Nicholas Knauer'"
)
Sys.sleep(5) # Wait a hot sec!
results <- search$Results() # Saves search results into results object
Sys.sleep(5) # Wait a hot sec!
results$Item(1)$ReceivedTime() # Received time of first search result
as.Date("1899-12-30") + floor(results$Item(1)$ReceivedTime()) # Received date
# Iterates through results object to pull out all of the items
for (i in 1:results$Count()) {
if (as.Date("1899-12-30") + floor(results$Item(i)$ReceivedTime())
== as.Date(Sys.Date())) {
email <- results$Item(i)
}
}
attachment_file <- tempfile()
email$Attachments(1)$SaveAsFile(attachment_file)
data <- read.table(unz(attachment_file,"94602_Nick_ACS_Brand_All_FloodLights_20171217_111320_653491298.csv"), skip = 10, header=T, quote="\"", sep=",")
##install.packages('RDCOMClient')
library(RDCOMClient)
outlook_app <- COMCreate("Outlook.Application")
search <- outlook_app$AdvancedSearch(
"Inbox",
"urn:schemas:httpmail:subject = 'DDM Report #107047216 : \"Nick_ACS_Brand_All_FloodLights3\" from Nicholas Knauer'"
)
Sys.sleep(5) # Wait a hot sec!
results <- search$Results() # Saves search results into results object
Sys.sleep(5) # Wait a hot sec!
results$Item(1)$ReceivedTime() # Received time of first search result
as.Date("1899-12-30") + floor(results$Item(1)$ReceivedTime()) # Received date
# Iterates through results object to pull out all of the items
for (i in 1:results$Count()) {
if (as.Date("1899-12-30") + floor(results$Item(i)$ReceivedTime())
== as.Date(Sys.Date())) {
email <- results$Item(i)
}
}
attachment_file <- tempfile()
email$Attachments(1)$SaveAsFile(attachment_file)
data <- read.table(unz(attachment_file,"94602_Nick_ACS_Brand_All_FloodLights_20171217_111320_653491298.csv"), skip = 10, header=T, quote="\"", sep=",")
library(RDCOMClient)
outlook_app <- COMCreate("Outlook.Application")
search <- outlook_app$AdvancedSearch(
"Inbox",
"urn:schemas:httpmail:subject = 'DDM Report #107047216 : \"Nick_ACS_Brand_All_FloodLights3\" from Nicholas Knauer'"
)
Sys.sleep(5) # Wait a hot sec!
results <- search$Results() # Saves search results into results object
Sys.sleep(5) # Wait a hot sec!
results$Item(1)$ReceivedTime() # Received time of first search result
as.Date("1899-12-30") + floor(results$Item(1)$ReceivedTime()) # Received date
# Iterates through results object to pull out all of the items
for (i in 1:results$Count()) {
if (as.Date("1899-12-30") + floor(results$Item(i)$ReceivedTime())
== as.Date(Sys.Date())) {
email <- results$Item(i)
}
}
attachment_file <- tempfile()
email$Attachments(1)$SaveAsFile(attachment_file)
data <- read.table(unz(attachment_file,"94602_Nick_ACS_Brand_All_FloodLights_20171217_111320_653491298.csv"), skip = 10, header=T, quote="\"", sep=",")
View(data)
test<-"20171217"
url <- paste0("94602_Nick_ACS_Brand_All_FloodLights_",
test, "_111320_653491298.csv")
url
csv_file <- paste0("94602_Nick_ACS_Brand_All_FloodLights_",
test, "_111320_653491298.csv")
data1 <- read.table(unz(attachment_file,csv_file), skip = 10, header=T, quote="\"", sep=",")
system_date<-Sys.Date()
system_date
gsub('\\$', '', '$5.00$')
gsub('-', '', system_date)
library(RDCOMClient)
outlook_app <- COMCreate("Outlook.Application")
search <- outlook_app$AdvancedSearch(
"Inbox",
"urn:schemas:httpmail:subject = 'DDM Report #107047216 : \"Nick_ACS_Brand_All_FloodLights3\" from Nicholas Knauer'"
)
Sys.sleep(5) # Wait a hot sec!
results <- search$Results() # Saves search results into results object
Sys.sleep(5) # Wait a hot sec!
results$Item(1)$ReceivedTime() # Received time of first search result
as.Date("1899-12-30") + floor(results$Item(1)$ReceivedTime()) # Received date
# Iterates through results object to pull out all of the items
for (i in 1:results$Count()) {
if (as.Date("1899-12-30") + floor(results$Item(i)$ReceivedTime())
== as.Date(Sys.Date())) {
email <- results$Item(i)
}
}
attachment_file <- tempfile()
email$Attachments(1)$SaveAsFile(attachment_file)
##Automatically Determine csv file name
system_date<-Sys.Date()
system_day_revised<-gsub('-', '', system_date)
csv_file <- paste0("94602_Nick_ACS_Brand_All_FloodLights_",
system_day_revised, "_111320_653491298.csv")
##Read CSV File
##data <- read.table(unz(attachment_file,"94602_Nick_ACS_Brand_All_FloodLights_20171217_111320_653491298.csv"), skip = 10, header=T, quote="\"", sep=",")
data1 <- read.table(unz(attachment_file,csv_file), skip = 10, header=T, quote="\"", sep=",")
View(data1)
library(readr)
data1 <- read_table(unz(attachment_file,csv_file), skip = 10, header=T, quote="\"", sep=",")
data1 <- read_table(unz(attachment_file,csv_file), skip = 10)
View(data1)
data1 <- read_table(attachment_file, skip = 10)
View(data1)
data1 <- read_table(attachment_file,csv_file), skip = 10)
data1 <- read_table(unz(attachment_file,csv_file), skip = 10)
spec(...)
spec()
spec(data1)
data1 <- read.table(unz(attachment_file,csv_file), skip = 10, header=T, quote="\"", sep=",")
View(data1)
library(dygraphs)
install.packages('dygraphs')
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "1920-1-1", to = "1930-1-1") %>%
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "50", to = "50.1", axis = "y", color = "black")
data("nhtemp")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "1920-1-1", to = "1930-1-1") %>%
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "50", to = "50.1", axis = "y", color = "black")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "1920-1-1", to = "1930-1-1") %>%
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "50", to = "50.1", axis = "y", color = "black")
devtools::install_github("rstudio/keras")
install.packages('reticulate')
install.packages('tensorflow')
install.packages('reticulate')
install.packages("reticulate")
install.packages('tensorflow')
devtools::install_github("rstudio/keras")
library(keras)
install_keras()
library(keras)
mnist <- dataset_mnist()
install_keras()
install_keras()
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
plot(history)
model %>% predict_classes(x_test)
library(fuzzyjoin)
date <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14'))
site <- c("abcejams.com", "reitimes.com", "posehbc")
df1 <- data.frame(date, site, stringsAsFactors = FALSE)
df1$site<-as.character(df1$site)
library(fuzzyjoin)
date <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14'))
site <- c("abcejams.com", "reitimes.com", "posehbc")
df1 <- data.frame(date, site, stringsAsFactors = FALSE)
date2 <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14', '2018-2-9'))
site2 <- c("jams", "time", "pose", "abce")
metric2 <- c(1, 2, 3, 4)
metric3 <- c(10, 20, 30, 40)
df2 <- data.frame(date2, site2, metric2, metric3, stringsAsFactors = FALSE)
regex_full_join(df1, df2, by = c("site" = "site2", "date" = "date2"))
library(stringi)
install.packages('stringi')
library(stringi)
date <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14'))
site <- c("abcejams.com", "reitimes.com", "posehbc")
df1 <- data.frame(date, site, stringsAsFactors = FALSE)
date2 <- as.Date(c('2010-11-1', '2008-3-25', '2007-3-14', '2018-2-9'))
site2 <- c("jams", "time", "pose", "abce")
metric2 <- c(1, 2, 3, 4)
metric3 <- c(10, 20, 30, 40)
df2 <- data.frame(date2, site2, metric2, metric3, stringsAsFactors = FALSE)
regex_full_join(df1, df2, by = c("site" = "site2", "date" = "date2"))
blogdown::install_hugo()
library(httr)
library(jsonlite)
library(DT)
library(dplyr)
library(twitteR)
library(syuzhet)
library(scales)
library(readr)
##install.packages('qpcR')
library(qpcR)
spotifyKey <- "c432b36c21724d2989baf7d4d8a6bfd3"
spotifySecret <- "047d74d4926c44ec8681c236d702dff9"
response = POST(
'https://accounts.spotify.com/api/token',
accept_json(),
authenticate(spotifyKey, spotifySecret),
body = list(grant_type = 'client_credentials'),
encode = 'form',
verbose()
)
token = content(response)$access_token
HeaderValue = paste0('Bearer ', token)
new_releases_url <- "https://api.spotify.com/v1/browse/new-releases"
getNewReleases <- GET(new_releases_url, add_headers(Authorization = HeaderValue))
newReleasesContent <- jsonlite::fromJSON(toJSON(content(getNewReleases)))
newreleases<-data.frame(matrix(unlist(newReleasesContent$albums$items$id),
nrow=newReleasesContent$albums$total, byrow=T),stringsAsFactors=FALSE)
##spotify<-newreleases[1:30,]
spotify<-unique(newreleases[,1])
get.tracks <- function(spotify){
albumTracksURL <- paste("https://api.spotify.com/v1/albums/", spotify, "/tracks?limit=50", sep="")
getTracks <- GET(albumTracksURL, add_headers(Authorization = HeaderValue))
albumTracks <- jsonlite::fromJSON(toJSON(content(getTracks)))
ids <- data.frame(matrix(unlist(albumTracks$items$id),
nrow=albumTracks$total, byrow=T),stringsAsFactors=FALSE)
names <- data.frame(matrix(unlist(albumTracks$items$name),
nrow=albumTracks$total, byrow=T),stringsAsFactors=FALSE)
artists<-albumTracks$items$artists
artists1<-do.call(rbind, lapply(artists, function(x) do.call(cbind, lapply(x[c('id', 'name')], toString))))
result<-qpcR:::cbind.na(ids, names, artists1)
##result <- cbind(ids, names, artists1)
colnames(result) <- c("ID", "NAME", "ARTIST ID", "ARTIST NAME")
return(result)
}
df <- lapply(spotify, get.tracks)
result <- do.call(rbind, df)
result_final<-result
names(result_final) <- c("ID", "NAME", "ARTIST ID", "ARTIST NAME")
final<-result_final
final1<-final[!duplicated(final), ]
final1<-final1[complete.cases(final1), ]
##Genius
client_id <- "3y_TtkyL_4l7CkeLVymC7_MKemb5Ik3A0XG9lxJ-y7Zav4b9gPXYzkbfmXfKm-V1"
client_secret <- "ff64O8-DpJYJlhVRszdxO1qnuX7VpL9tWSW33a3uwmPJp0LpbGDczK4PB6LMach_C6M-00-WPE9lwcV6zXo-DQ"
token <- "w3BQHoOssKNneb9agreuxcdnrDyxS7jRktAci6qzB5RKypgvH-DA5SvDI5bDzxAW"
HeaderValue = paste0('Bearer ', token)
response = POST(
'https://api.genius.com/token',
accept_json(),
authenticate(client_id, client_secret),
body = list(grant_type = 'client_credentials'),
encode = 'form',
verbose()
)
##token = content(response)$access_token
token <- "w3BQHoOssKNneb9agreuxcdnrDyxS7jRktAci6qzB5RKypgvH-DA5SvDI5bDzxAW"
HeaderValue = paste0('Bearer ', token)
final1$NAME_and_ARTISTS <- paste(final1$NAME,final1$`ARTIST NAME`,sep = " ")
final1$NAME_and_ARTISTS<-gsub(" ", "%20", final1$NAME_and_ARTISTS, fixed=TRUE)
##final1$V8<-NULL
for(i in 1:length(final1[,5])) {
audioFeaturesURL <- paste("https://api.genius.com/search?q=",
final1[i,5],
sep="")
getaudioFeatures <- GET(audioFeaturesURL, add_headers(Authorization = HeaderValue))
audioFeatures <- jsonlite::fromJSON(toJSON(content(getaudioFeatures)))
answer <- unlist(audioFeatures$response$hits$result$url[1], use.names=FALSE)
answer1 <- ifelse(is.null(answer), "No Lyrics", answer)
answer2 <- unlist(audioFeatures$response$hits$result$primary_artist$id[1], use.names=FALSE)
answer3 <- ifelse(is.null(answer2), "No Lyrics", answer2)
final1[i,6] <- answer1
final1[i,7] <- answer3
}
##ARTIST ID
for(i in 1:length(final1[,7])) {
audioFeaturesURL <- paste("https://api.genius.com/artists/",
final1[i,7],
sep="")
getaudioFeatures <- GET(audioFeaturesURL, add_headers(Authorization = HeaderValue))
audioFeatures <- jsonlite::fromJSON(toJSON(content(getaudioFeatures)))
answer <- unlist(audioFeatures$response$artist$twitter_name, use.names=FALSE)
answer1 <- ifelse(is.null(answer), "No Twitter Name", answer)
final1[i,8] <- answer1
}
final2<-final1[,c(2,4,6,8)]
##final2<-select(final1$, NAME, `ARTIST NAME`, V6, V8)
colnames(final2)[3] <- "Genius Lyrics Link"
final2$Without <- gsub("https://genius.com/","",final2$`Genius Lyrics Link`)
final2$Artist_First <- sub("-.*", "", final2$Without)
final2$Exists_In_URL <- mapply(grepl, pattern=final2$Artist_First, x=final2$`ARTIST NAME`)
final2$NewURL <- ifelse(final2$Exists_In_URL == TRUE, final2$`Genius Lyrics Link`, "No Lyrics")
final2 <- final2[!grepl("No Lyrics", final2$`NewURL`),]
##final2$NewURL <- paste0("<a href='",final2$NewURL,"' target='_blank'>",final2$NewURL,"</a>")
final2 <- final2[,c(1,2,8,4)]
##final2 <- select(final2, NAME, `ARTIST NAME`, NewURL, V8)
colnames(final2)[3] <- "Genius Lyrics Link"
##TWITTER
client_twitter_id <- "KxmCJDmGHiVmhgsDXu0Xx1Sv4"
client_twitter_secret <- "PiBV4GvJE3xDDWLmwT6IVKiCVuJS00hVF8MdmXoUUGd6BsHY41"
twitter_token <- "3346559890-NSSgoOv1djcSTEp24Ksw7AbhqdXms5ELbAdzb2K"
HeaderValue = paste0('Bearer ', twitter_token)
response = POST(
'https://api.twitter.com/token',
accept_json(),
authenticate(client_twitter_id, client_twitter_secret),
body = list(grant_type = 'client_credentials'),
encode = 'form',
verbose()
)
##token = content(response)$access_token
twitter_token <- "3346559890-NSSgoOv1djcSTEp24Ksw7AbhqdXms5ELbAdzb2K"
HeaderValue = paste0('Bearer ', twitter_token)
consumer_key <- "KxmCJDmGHiVmhgsDXu0Xx1Sv4"
consumer_secret <- "PiBV4GvJE3xDDWLmwT6IVKiCVuJS00hVF8MdmXoUUGd6BsHY41"
access_token <- "3346559890-NSSgoOv1djcSTEp24Ksw7AbhqdXms5ELbAdzb2K"
access_secret <- "YjFoU1dDeIl93cNb6jislPaCdlniwHaFVqg3n83VFIhLw"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
##doit <- function(i) {
##i
## connect to Twitter
##origop <- options("httr_oauth_cache")
##options(httr_oauth_cache=TRUE)
##setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
##options(httr_oauth_cache=origop)
##i
}
##doit
final2$Primary_Artist <- gsub(",.*$", "", final2$`ARTIST NAME`)
final2$Primary_Artist1 <- gsub(" ", " + ", final2$Primary_Artist, fixed=TRUE)
newdf1<-data.frame(unique(final2[,6]))
newdf2<-data.frame(unique(final2[,1]))
newdf2[,1]<-gsub("\\[|\\]", "", newdf2[,1])
colnames(newdf2)[1]<-"Songs"
##DUMMY DATAFRAME
text = c("This is neutral")
Col2 = 0
Col3 = 0
Col4 = 0
Col5 = 0
Col6 = 0
Col7 = 0
Col8 = 0
Col9 = 0
Col10 = 0
Col11 = 0
Col12 = 0
Col13 = 0
Col14 = 0
Col15 = 0
Col16 = 0
df = data.frame(text, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, Col16)
library(dplyr)
for(i in 1:length(newdf1[,1])) {
newdf <- searchTwitter(as.character(newdf1[i,1]), n=1000)
twitterdf <- if(length(newdf)==0) {df} else {twListToDF(newdf)}
twitterdf <- dplyr::select(twitterdf, text)
twitterdf <- unique(twitterdf)
twitterdf$filtered = gsub("&amp", "", twitterdf$text)
twitterdf$filtered = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", twitterdf$filtered)
twitterdf$filtered = gsub("@\\w+", "", twitterdf$filtered)
twitterdf$filtered = gsub("[[:punct:]]", "", twitterdf$filtered)
twitterdf$filtered = gsub("[[:digit:]]", "", twitterdf$filtered)
twitterdf$filtered = gsub("http\\w+", "", twitterdf$filtered)
twitterdf$filtered = gsub("[ \t]{2,}", "", twitterdf$filtered)
twitterdf$filtered = gsub("^\\s+|\\s+$", "", twitterdf$filtered)
twitterdf$filtered <- sapply(twitterdf$filtered,function(row) iconv(row, "latin1", "ASCII", sub=""))
twitterdf$filtered <- sapply(newdf2$Songs,function(w) twitterdf$filtered <<- gsub(paste0(w,"|",tolower(w)),"it",twitterdf$filtered))
testing<-data.frame(twitterdf$filtered)
testing1<-data.frame(testing[,ncol(testing)])
colnames(testing1)[1]<-"Tweets"
testing1$Tweets<-as.character(testing1$Tweets)
testing1$sentiment1<-data.frame(get_sentiment(testing1[,1]))
answer1<-mean(testing1$sentiment1$get_sentiment.testing1...1..)
newdf1[i,2] <- answer1
}
withsentiment <- left_join(final2,newdf1,by=c("Primary_Artist1"="unique.final2...6.."))
sentiment_filtered <- withsentiment[,c(1,2,3,4,7)]
colnames(sentiment_filtered)[5] <- "Recent Twitter Sentiment"
colnames(sentiment_filtered)[4] <- "Twitter Name"
sentiment_filtered$`Recent Twitter Sentiment`<-as.numeric(sentiment_filtered$`Recent Twitter Sentiment`)
setwd("~/website/r-projects")
write_csv(sentiment_filtered,"testing.csv")
setwd("~/website/r-projects")
#render your sweet site.
rmarkdown::render_site()
library(nlme)
head(MathAchieve)
str(MathAchieve)
dim(MathAchieve)
head(MathAchSchool)
mses<- with(MathAchieve, tapply(SES, School, mean))
mses[as.character(MathAchSchool$School[1:8])]
Bryk <- as.data.frame(MathAchieve[,c("School", "SES", "MathAch")])
names(Bryk)
names(Bryk)<-tolower(names(Bryk))
set.seed(12345)
(sample20 <- sort(sample(nrow(Bryk),20)))
Bryk[sample20,]
sector<-MathAchSchool$Sector
names(sector) <- row.names(MathAchSchool)
head(sector)
head(MathAchSchool$Sector)
head(sector)
Bryk<-within(Bryk, {
meanses <- as.vector(mses[as.character(school)])
cses <- ses - meanses
sector <-sector[as.character(school)]
})
head(Bryk)
Bryk[sample20,]
cat <- with(Bryk, sample(unique(school[sector=="Catholic"]),20))
head(cat)
Cat.20<- Bryk[is.element(Bryk$school, cat)]
Cat.20<- Bryk[is.element(Bryk$school, cat),]
dim(Cat.20)
pub <- with(Bryk, sample(unique(school[sector=="Public"]),20))
Cat.20<- Bryk[is.element(Bryk$school, pub),]
Cat.20<- Bryk[is.element(Bryk$school, cat),]
dim(Cat.20)
Pub.20<- Bryk[is.element(Bryk$school, pub),]
dim(Pub.20)
library(lattice)
trellis.device(color = FALSE)
xyplot(mathach ~ cses | school, data=Cat.20, main="Catholic", type=c("p", "r", "smooth"), span=1)
cat.list<- lmList(mathach ~ cses | school, subset = sector=="Catholic", data=Bryk)
pub.list <- lmList(mathach ~ cses | school, subset = sector=="Public", data=Bryk)
plot(intervals(cat.list), main="Catholic")
plot(interaction(pub.list), main="Public")
plot(intervals(pub.list), main="Public")
cat.coef<-coef(cat.list)
head(cat.coef,6)
old <- par(mfrow=c(1,2))
boxplot(cat.coef[,1], pub.coef[,1], main="Intercepts", names=c("Catholic", "Public"))
old <- par(mfrow=c(1,2))
boxplot(cat.coef[,1], pub.coef[,1], main="Intercepts", names=c("Catholic", "Public"))
pub.coef<-coef(pub.list)
boxplot(cat.coef[,1], pub.coef[,1], main="Intercepts", names=c("Catholic", "Public"))
boxplot(cat.coef[,2], pub.coef[,2], main="Slopes", names=c("Catholic", "Public"))
par(old)
head(Bryk)
Bryk$sector <- factor(Bryk$sector, levels=c("Public", "Catholic"))
contrasts(Bryk$sector)
bryk.lme.1<- lme(mathach ~ meanses*ses + sector*cses, random = ~ cses | school, data = Bryk)
bryk.lme.1<- lme(mathach ~ meanses*cses + sector*cses, random = ~ cses | school, data = Bryk)
summary(bryk.lme.1)
str(Bryk)
bryk.lme.2 <-update(bryk.lme.1, random = ~ 1|school)
anova(bryk.lme.1,bryk.lme.2)
bryk.lme.3<-update(bryk.lme.1, random=~cses - 1 |school)
anova(bryk.lme.1,bryk.lme.3)
