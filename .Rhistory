"x.x", "x.y", "y"), row.names = c(55L, 109L, 163L, 217L, 271L,
10L, 118L, 172L, 226L, 280L, 19L, 73L, 181L, 235L, 289L, 28L,
82L, 136L, 244L, 298L, 37L, 91L, 145L, 199L, 307L, 46L, 100L,
154L, 208L, 262L, 58L, 112L, 166L, 220L, 274L, 13L, 121L, 175L,
229L, 283L, 22L, 76L, 184L, 238L, 292L, 31L, 85L, 139L, 247L,
301L, 40L, 94L, 148L, 202L, 310L, 49L, 103L, 157L, 211L, 265L,
61L, 115L, 169L, 223L, 277L, 16L, 124L, 178L, 232L, 286L, 25L,
79L, 187L, 241L, 295L, 34L, 88L, 142L, 250L, 304L, 43L, 97L,
151L, 205L, 313L, 52L, 106L, 160L, 214L, 268L, 56L, 110L, 164L,
218L, 272L, 11L, 119L, 173L, 227L, 281L, 20L, 74L, 182L, 236L,
290L, 29L, 83L, 137L, 245L, 299L, 38L, 92L, 146L, 200L, 308L,
47L, 101L, 155L, 209L, 263L, 59L, 113L, 167L, 221L, 275L, 14L,
122L, 176L, 230L, 284L, 23L, 77L, 185L, 239L, 293L, 32L, 86L,
140L, 248L, 302L, 41L, 95L, 149L, 203L, 311L, 50L, 104L, 158L,
212L, 266L, 62L, 116L, 170L, 224L, 278L, 17L, 125L, 179L, 233L,
287L, 26L, 80L, 188L, 242L, 296L, 35L, 89L, 143L, 251L, 305L,
44L, 98L, 152L, 206L, 314L, 53L, 107L, 161L, 215L, 269L, 57L,
111L, 165L, 219L, 273L, 12L, 120L, 174L, 228L, 282L, 21L, 75L,
183L, 237L, 291L, 30L, 84L, 138L, 246L, 300L, 39L, 93L, 147L,
201L, 309L, 48L, 102L, 156L, 210L, 264L, 60L, 114L, 168L, 222L,
276L, 15L, 123L, 177L, 231L, 285L, 24L, 78L, 186L, 240L, 294L,
33L, 87L, 141L, 249L, 303L, 42L, 96L, 150L, 204L, 312L, 51L,
105L, 159L, 213L, 267L, 63L, 117L, 171L, 225L, 279L, 18L, 126L,
180L, 234L, 288L, 27L, 81L, 189L, 243L, 297L, 36L, 90L, 144L,
252L, 306L, 45L, 99L, 153L, 207L, 315L, 54L, 108L, 162L, 216L,
)
dput(newdata)
dput(newdata)
View(newdata)
head(newdata,10)
head(newdata,30)
head(newdata,50)
r1 = read.table(text = "     Round  Station Partner1 Partner2
55  round1 station1    male1  female5
109 round1 station1    male3  female4
163 round1 station2    male2  female3
217 round1 station2    male4  female1
271 round1 station3    male5  female6
10  round1 station3    male6  female2", header = T)
r1
r1$Round = as.numeric(substr(r1$Round, 6, 6))
r1$Station = as.numeric(substr(r1$Station, start = 8, stop = 8))
r1$Male = as.numeric(substr(r1$Partner1, 5, 5))
r1$Female = as.numeric(substr(r1$Partner2, 7, 7))
r1[c("Partner1", "Partner2")] = list(NULL)
# function
next_round = function(r) {
r$Male = r$Male[c(3, 4, 5, 6, 1, 2)]
r$Female = r$Female[c(5, 6, 1, 2, 3, 4)]
problems = which(r$Male == r$Female)
# switch male problems
switch_with = ifelse(problems %% 2 == 0, problems - 1, problems + 1)
r$Male[c(rbind(switch_with, problems))] = r$Male[c(rbind(problems, switch_with))]
# increment round
r$Round = r$Round + 1
return(r)
}
# demonstration
r1
(r2 = next_round(r1))
(r3 = next_round(r2))
r4 = next_round(r3)
r4
r1$Round
r1$Station
library(shiny)
data(mtcars)
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(
column(6, checkboxGroupInput("dsnamesGrp","Variable name")),
column(6, uiOutput("dsordsGrp"), inline= FALSE)
)
),
mainPanel(
dataTableOutput('contents'))
)
)
server <- function(input, output, session) {
output$contents <- renderDataTable({mtcars})
dsnames <- list()
dsnames <- names(mtcars)
cb_options <- list()
cb_options[dsnames] <- dsnames
updateCheckboxGroupInput(session, "dsnamesGrp",
label = "Column name",
choices = cb_options,
selected = "")
ord_values <- list()
ord_values <- lapply(mtcars, function(x)length(unique(x)))
output$dsordsGrp <- renderText({unlist(ord_values)})
}
}
shinyApp(ui, server)
integrand <- function(x){
(exp(-x)*sin(x))
}
integrand(1)
integrand(-Inf)
integrand(Inf)
integrand(1,2)
integrate(integrand, -Inf, Inf )
integrate(integrand, -Inf)
?integrate
dnorm()
integrate(dnorm, -1.96, 1.96)
integrate(dnorm, -Inf, Inf)
integrate(integrand, -Inf, Inf)
?dnorm
integrate(integrand, -1, 2)
integrand <- function(x){
(exp(-exp(log(x))*sin(exp(log(x)))))
}
integrate(integrand, -1, 2)
integrate(integrand, -Inf, Inf)
integrand <- function(x){
(exp(-exp(log(x)))*sin(exp(log(x))))
}
integrate(integrand, -Inf, Inf)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(leaflet)
library(leaflet.extras)
library(rebird)
# Adding choices for Region Code input
choices = as.character(read.csv("./data/choices.csv")$x)
# Making my location icon
uloc = makeIcon(iconUrl = "./uloc.png", iconHeight = 25, iconWidth = 25)
### STARTING APP ### --------------------------------------------------------
ui <- bootstrapPage(
# Adding dynamically updating user location
tags$script('
$(document).ready(function () {
function getLocation(callback){
var options = {
enableHighAccuracy: true,
timeout: 5000,
maximumAge: 0
};
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
var timestamp = new Date();
console.log(coords.latitude + ", " + coords.longitude, "," + coords.accuracy);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
Shiny.onInputChange("accuracy", coords.accuracy);
Shiny.onInputChange("time", timestamp)
console.log(timestamp);
if (callback) {
callback();
}
}, 1100)
}
}
var TIMEOUT = 3000; //SPECIFY
var started = false;
function getLocationRepeat(){
//first time only - no delay needed
if (!started) {
started = true;
getLocation(getLocationRepeat);
return;
}
setTimeout(function () {
getLocation(getLocationRepeat);
}, TIMEOUT);
};
getLocationRepeat();
});
'),
theme = shinytheme("superhero"),
# Setting map to full-screen
tags$style(type="text/css", "html, body {width:100%;height:100%}"),
# Initializing leaflet output
leafletOutput("myMap", width="100%", height="100%"),
# Adding title overlayed on leaflet map
absolutePanel(top = 1, left = 50, draggable = T,
titlePanel("eBird Rarity Viewer")),
# Adding slider input overlayed on leaflet map
absolutePanel(bottom = 1, left = 45, draggable = T,
sliderInput("slider_in", "Days Back", min = 1, max = 30, value = 14, round = T)),
# Adding select text input overlayed on leaflet map
absolutePanel(top = 1, right = 45, draggable = T,
selectInput("region_in", "Region Code", choices = choices, selected = "US-MA", multiple = F, width  = 130))
# TODO: FIGURE OUT THIS SPECIES INPUT:
## Adding select text input overlayed on leaflet map
#absolutePanel(top = 40, left = 45, draggable = T,
#              textInput("species_in", "Species", placeholder = "Long-eared Owl"))
# Adding text input overlayed on leaflet map
#absolutePanel(top = 1, right = 45, draggable = T,
#textInput("region_in", "Region Code", value = "", placeholder = "US-MA"))
#submitButton("", icon("refresh")))
)
server <- function(input, output) {
# Rendering data frame from API with slider input
APIdata <- reactive({
# Initial fetch of data from eBird API, with conditionals to work around input errors.
a <- try(ebirdnotable(region = as.character(input$region_in), back = as.numeric(input$slider_in)))
if(class(a) == "try-error" ||length(a) == 0){return(NULL)}
## Adding species search
#b <- try(a[a$comName == as.character(species_in),])
#if(class(b) == "try-error" ||length(b) == 0){a = a} # need to figure out how to keep going
# Going back
# a = b
# Changing review status from logical to numeric
cols <- sapply(a, is.logical)
a[,cols] <- lapply(a[,cols], as.numeric)
# Initializing new date column
a["date"] <- format(strptime(a$obsDt, format = "%Y-%m-%d"), "%b %d")
# Initializing new color grouping column
a["group"] <- NA
# Assigning colors by review status
idx<-  (a$obsReviewed == 0) # Not reviewed
a$group[idx] <- "white"
idx<- (a$obsReviewed == 1) & (a$obsValid == 1) # Reviewed and accepted
a$group[idx] <- "green"
# Jittering lat/lon points to fix point overlap
a$lat = jitter(a$lat, factor = 3)
# print(a)
return(a)
})
# Adding dynamically updating user location
observe({
if(!is.null(input$lat)){
lat <- input$lat
lng <- input$long
acc <- input$accuracy
time <- input$time
proxy <- leafletProxy("myMap")
proxy  %>%
clearGroup(group="pos") %>%
addMarkers(icon = uloc,lng=lng, lat=lat, label = "My Location", popup=paste("My location is:","<br>",
lng,"Longitude","<br>",
lat,"Latitude", "<br>",
"My accuracy is:",  "<br>",
acc, "meters"),
group="pos") %>%
addCircles(lng=lng, lat=lat, radius=acc, group="pos")
}
})
# Leaflet map
output$myMap = renderLeaflet({
if(is.null(APIdata()))
{
# Rendering leaflet map
return(leaflet() %>% addTiles()) %>%
addSearchOSM(options = searchOSMOptions(zoom = 8)) %>%
setView(-19.451108, 30.479968, 2)
}
else
{
# Splitting up by review status in order to show reviewed on top
notReviewed = APIdata()[APIdata()$group == "white",]
accepted = APIdata()[APIdata()$group == "green",]
# Rendering leaflet map
leaflet() %>% addTiles() %>%
#addCircleMarkers(color = ~group, label = paste(APIdata()$comName,",",APIdata()$obsDt), labelOptions = labelOptions(noHide = F, direction = 'auto')) %>% # popup = paste("<a href = http://www.ebird.org/ebird/hotspot/",APIdata()$locID,"> ",APIdata()$locID," </a>", sep=)
addCircleMarkers(data = notReviewed, color = "#f5f5dc", opacity = 0.7, label = paste(notReviewed$comName,", ",notReviewed$date, ", ", notReviewed$locName,sep = "")) %>% # , labelOptions = labelOptions(noHide = F, direction = 'auto')) %>%
addCircleMarkers(data = accepted, color = "#00FF33", opacity = 0.7, label = paste(accepted$comName,", ",accepted$date, ", ", accepted$locName, sep = "")) %>% # , labelOptions = labelOptions(noHide = F, direction = 'auto')) %>%
#addEasyButton(easyButton(position = "topleft",
#                          icon="fa-crosshairs", title="Locate Me",
#                          onClick=JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
addLegend(position = "bottomright",
colors = c("#f5f5dc", "#00FF33"),
labels = c("Not reviewed", "Accepted"),
title = "Legend: review status", opacity = 1) %>%
addSearchOSM(options = searchOSMOptions(zoom = 8))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages('shinydashboard')
library(shinydashboard)
install.packages('shinythemes')
library(shinythemes)
library(leaflet)
install.packages('shinythemes')
install.packages('leaflet')
library(leaflet)
library(leaflet.extras)
install.packages('leaflet.extras')
library(leaflet.extras)
install.packages('rebird')
library(shiny)
library(shinydashboard)
library(shinythemes)
library(leaflet)
library(leaflet.extras)
library(rebird)
# Adding choices for Region Code input
choices = as.character(read.csv("./data/choices.csv")$x)
# Making my location icon
uloc = makeIcon(iconUrl = "./uloc.png", iconHeight = 25, iconWidth = 25)
### STARTING APP ### --------------------------------------------------------
ui <- bootstrapPage(
# Adding dynamically updating user location
tags$script('
$(document).ready(function () {
function getLocation(callback){
var options = {
enableHighAccuracy: true,
timeout: 5000,
maximumAge: 0
};
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
var timestamp = new Date();
console.log(coords.latitude + ", " + coords.longitude, "," + coords.accuracy);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
Shiny.onInputChange("accuracy", coords.accuracy);
Shiny.onInputChange("time", timestamp)
console.log(timestamp);
if (callback) {
callback();
}
}, 1100)
}
}
var TIMEOUT = 3000; //SPECIFY
var started = false;
function getLocationRepeat(){
//first time only - no delay needed
if (!started) {
started = true;
getLocation(getLocationRepeat);
return;
}
setTimeout(function () {
getLocation(getLocationRepeat);
}, TIMEOUT);
};
getLocationRepeat();
});
'),
theme = shinytheme("superhero"),
# Setting map to full-screen
tags$style(type="text/css", "html, body {width:100%;height:100%}"),
# Initializing leaflet output
leafletOutput("myMap", width="100%", height="100%"),
# Adding title overlayed on leaflet map
absolutePanel(top = 1, left = 50, draggable = T,
titlePanel("eBird Rarity Viewer")),
# Adding slider input overlayed on leaflet map
absolutePanel(bottom = 1, left = 45, draggable = T,
sliderInput("slider_in", "Days Back", min = 1, max = 30, value = 14, round = T)),
# Adding select text input overlayed on leaflet map
absolutePanel(top = 1, right = 45, draggable = T,
selectInput("region_in", "Region Code", choices = choices, selected = "US-MA", multiple = F, width  = 130))
# TODO: FIGURE OUT THIS SPECIES INPUT:
## Adding select text input overlayed on leaflet map
#absolutePanel(top = 40, left = 45, draggable = T,
#              textInput("species_in", "Species", placeholder = "Long-eared Owl"))
# Adding text input overlayed on leaflet map
#absolutePanel(top = 1, right = 45, draggable = T,
#textInput("region_in", "Region Code", value = "", placeholder = "US-MA"))
#submitButton("", icon("refresh")))
)
server <- function(input, output) {
# Rendering data frame from API with slider input
APIdata <- reactive({
# Initial fetch of data from eBird API, with conditionals to work around input errors.
a <- try(ebirdnotable(region = as.character(input$region_in), back = as.numeric(input$slider_in)))
if(class(a) == "try-error" ||length(a) == 0){return(NULL)}
## Adding species search
#b <- try(a[a$comName == as.character(species_in),])
#if(class(b) == "try-error" ||length(b) == 0){a = a} # need to figure out how to keep going
# Going back
# a = b
# Changing review status from logical to numeric
cols <- sapply(a, is.logical)
a[,cols] <- lapply(a[,cols], as.numeric)
# Initializing new date column
a["date"] <- format(strptime(a$obsDt, format = "%Y-%m-%d"), "%b %d")
# Initializing new color grouping column
a["group"] <- NA
# Assigning colors by review status
idx<-  (a$obsReviewed == 0) # Not reviewed
a$group[idx] <- "white"
idx<- (a$obsReviewed == 1) & (a$obsValid == 1) # Reviewed and accepted
a$group[idx] <- "green"
# Jittering lat/lon points to fix point overlap
a$lat = jitter(a$lat, factor = 3)
# print(a)
return(a)
})
# Adding dynamically updating user location
observe({
if(!is.null(input$lat)){
lat <- input$lat
lng <- input$long
acc <- input$accuracy
time <- input$time
proxy <- leafletProxy("myMap")
proxy  %>%
clearGroup(group="pos") %>%
addMarkers(icon = uloc,lng=lng, lat=lat, label = "My Location", popup=paste("My location is:","<br>",
lng,"Longitude","<br>",
lat,"Latitude", "<br>",
"My accuracy is:",  "<br>",
acc, "meters"),
group="pos") %>%
addCircles(lng=lng, lat=lat, radius=acc, group="pos")
}
})
# Leaflet map
output$myMap = renderLeaflet({
if(is.null(APIdata()))
{
# Rendering leaflet map
return(leaflet() %>% addTiles()) %>%
addSearchOSM(options = searchOSMOptions(zoom = 8)) %>%
setView(-19.451108, 30.479968, 2)
}
else
{
# Splitting up by review status in order to show reviewed on top
notReviewed = APIdata()[APIdata()$group == "white",]
accepted = APIdata()[APIdata()$group == "green",]
# Rendering leaflet map
leaflet() %>% addTiles() %>%
#addCircleMarkers(color = ~group, label = paste(APIdata()$comName,",",APIdata()$obsDt), labelOptions = labelOptions(noHide = F, direction = 'auto')) %>% # popup = paste("<a href = http://www.ebird.org/ebird/hotspot/",APIdata()$locID,"> ",APIdata()$locID," </a>", sep=)
addCircleMarkers(data = notReviewed, color = "#f5f5dc", opacity = 0.7, label = paste(notReviewed$comName,", ",notReviewed$date, ", ", notReviewed$locName,sep = "")) %>% # , labelOptions = labelOptions(noHide = F, direction = 'auto')) %>%
addCircleMarkers(data = accepted, color = "#00FF33", opacity = 0.7, label = paste(accepted$comName,", ",accepted$date, ", ", accepted$locName, sep = "")) %>% # , labelOptions = labelOptions(noHide = F, direction = 'auto')) %>%
#addEasyButton(easyButton(position = "topleft",
#                          icon="fa-crosshairs", title="Locate Me",
#                          onClick=JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
addLegend(position = "bottomright",
colors = c("#f5f5dc", "#00FF33"),
labels = c("Not reviewed", "Accepted"),
title = "Legend: review status", opacity = 1) %>%
addSearchOSM(options = searchOSMOptions(zoom = 8))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Made a new data frame with lat, long, and the value
df = data.frame(value = v, lng = y, lat = x)
#Did this....
s = SpatialPixelsDataFrame(df[,c('lng', 'lat')], data = df)
crs(s) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
r = raster(s)
# Set up the colors
val = as.numeric(c(0:max(df$value)))
pal = colorNumeric(c("yellow", "orange", "red"), val,
na.color = "transparent")
# Made the map
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addRasterImage(r, colors = pal, opacity = 0.5) %>%
addLegend(pal = pal, values = val, title = "Number of Needs")
df = data.frame(value = v, lng = y, lat = x)
#Did this....
df = data.frame(value = v, lng = y, lat = x)
library(raster)
library(leaflet)
library(rgdal)
install.packages('rgdal')
library(rgdal)
needsRaster = rasterFromXYZ(forRaster)
library(raster)
library(leaflet)
needsRaster = rasterFromXYZ(forRaster)
library(raster)
library(leaflet)
library(rgdal)
needsRaster = rasterFromXYZ(forRaster)
library(shiny)
library(shinydashboard)
library(leaflet)
library(dplyr)
library(htmltools)
shinyApp(
ui <- fluidPage(
titlePanel("eBird Visualizer"),
fileInput("MyEBirdData_in", "MyEBirdData", buttonLabel = "Upload a .csv",
placeholder = "No File Selected...", width = "255px",
accept = ".csv"),
leafletOutput("myMap")
),
server = function(input, output) {
output$contents <- renderTable({
inFile <- input$MyEBirdData_in
if (is.null(inFile))
return(NULL)
myData = read.csv(inFile$datapath, header = input$header)
df0 = data.frame(myData$Submission.ID, myData$Latitude, myData$Longitude)
df = unique(df0)
names(df)[2] = 'latitude'
names(df)[3] = 'longitude'
})
output$myMap = renderLeaflet({
leaflet(data = df) %>% addProviderTiles(providers$CartoDB.Positron)
})
}
)
