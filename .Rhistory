new_releases_url <- "https://api.spotify.com/v1/browse/new-releases"
getNewReleases <- GET(new_releases_url, add_headers(Authorization = HeaderValue))
newReleasesContent <- jsonlite::fromJSON(toJSON(content(getNewReleases)))
newreleases<-data.frame(matrix(unlist(newReleasesContent$albums$items$id),
nrow=newReleasesContent$albums$total, byrow=T),stringsAsFactors=FALSE)
spotify<-newreleases[1:30,]
```
```{r, echo=FALSE, include=FALSE}
get.tracks <- function(spotify){
albumTracksURL <- paste("https://api.spotify.com/v1/albums/", spotify, "/tracks?limit=50", sep="")
getTracks <- GET(albumTracksURL, add_headers(Authorization = HeaderValue))
albumTracks <- jsonlite::fromJSON(toJSON(content(getTracks)))
ids <- data.frame(matrix(unlist(albumTracks$items$id),
nrow=albumTracks$total, byrow=T),stringsAsFactors=FALSE)
names <- data.frame(matrix(unlist(albumTracks$items$name),
nrow=albumTracks$total, byrow=T),stringsAsFactors=FALSE)
artists<-albumTracks$items$artists
artists1<-do.call(rbind, lapply(artists, function(x) do.call(cbind, lapply(x[c('id', 'name')], toString))))
result <- cbind(ids, names, artists1)
colnames(result) <- c("ID", "NAME", "ARTIST ID", "ARTIST NAME")
return(result)
}
df <- lapply(spotify, get.tracks)
result <- do.call(rbind, df)
result1<-result[1:100,]
result2<-result[101:200,]
result3<-result[201:nrow(result),]
View(result1)
for(i in 1:length(result1[,1])) {
audioFeaturesURL <- paste("https://api.spotify.com/v1/audio-features/",
result1[i,1],
sep="")
getaudioFeatures <- GET(audioFeaturesURL, add_headers(Authorization = HeaderValue))
audioFeatures <- jsonlite::fromJSON(toJSON(content(getaudioFeatures)))
result1[i,5] <- audioFeatures$danceability
result1[i,6] <- audioFeatures$energy
result1[i,7] <- audioFeatures$key
}
names(result1) <- c("ID", "NAME", "ARTIST ID", "ARTIST NAME", "Danceability","Energy",
"Key")
View(result1)
View(newreleases)
View(result)
View(result1)
hits8 <- function() {
x <- rbinom(42, 1, 1/4)                # 41 Binomial trials with 25% of not having 17,000 fans
x[1] <- 0                              # ... and a 0 to get started with `diff`
if(sum(x) >= 3) {                      # Are there at least 8 successes?
max(diff(cumsum(x), lag=3)) >= 3   # Are there 8 successes in a row anywhere?
} else {
FALSE                              # Not enough successes for 8 in a row
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
1-average_simulation
hits8 <- function() {
x <- rbinom(42, 1, 0.146)                # 41 Binomial trials with 25% of not having 17,000 fans
x[1] <- 0                              # ... and a 0 to get started with `diff`
if(sum(x) >= 3) {                      # Are there at least 8 successes?
max(diff(cumsum(x), lag=3)) >= 3   # Are there 8 successes in a row anywhere?
} else {
FALSE                              # Not enough successes for 8 in a row
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
1-average_simulation
Number_Of_Games_In_Season <- 41
Number_Of_Games_In_Season <- Number_Of_Games_In_Season + 1
Probability_of_Not_Reaching_17000_Fans <- 1/4
Number_of_Games_In_A_Row_With_Less_Than_17000_Fans <- 3
##Input Each Required Variable
Number_Of_Games_In_Season <- 41
Number_Of_Games_In_Season <- Number_Of_Games_In_Season + 1
Probability_of_Not_Reaching_17000_Fans <- 1/4
Number_of_Games_In_A_Row_With_Less_Than_17000_Fans <- 3
hits8 <- function() {
x <- rbinom(Number_Of_Games_In_Season, 1, Probability_of_Not_Reaching_17000_Fans)                                                      # 41 Binomial trials with 25% of not having 17,000 fans
x[1] <- 0                                                                                                                              # ... and a 0 to get started with `diff`
if(sum(x) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans) {                                                                     # Are there at least 3 successes?
max(diff(cumsum(x), lag=Number_of_Games_In_A_Row_With_Less_Than_17000_Fans)) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans   # Are there 3 successes in a row anywhere?
} else {
FALSE                                                                                                                                # Not enough successes for 8 in a row
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
1-average_simulation
##Input Each Required Variable
Number_Of_Games_In_Season <- 41
Number_Of_Games_In_Season <- Number_Of_Games_In_Season + 1
Probability_of_Not_Reaching_17000_Fans <- 1/4
Number_of_Games_In_A_Row_With_Less_Than_17000_Fans <- 4
hits8 <- function() {
x <- rbinom(Number_Of_Games_In_Season, 1, Probability_of_Not_Reaching_17000_Fans)                                                      # 41 Binomial trials with 25% of not having 17,000 fans
x[1] <- 0                                                                                                                              # ... and a 0 to get started with `diff`
if(sum(x) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans) {                                                                     # Are there at least 3 successes?
max(diff(cumsum(x), lag=Number_of_Games_In_A_Row_With_Less_Than_17000_Fans)) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans   # Are there 3 successes in a row anywhere?
} else {
FALSE                                                                                                                                # Not enough successes for 8 in a row
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
1-average_simulation
##Input Each Required Variable
Number_Of_Games_In_Season <- 41
Number_Of_Games_In_Season <- Number_Of_Games_In_Season + 1
Probability_of_Not_Reaching_17000_Fans <- 1/4
Number_of_Games_In_A_Row_With_Less_Than_17000_Fans <- 3
hits8 <- function() {
x <- rbinom(Number_Of_Games_In_Season, 1, Probability_of_Not_Reaching_17000_Fans)                                                      # 41 Binomial trials with 25% of not having 17,000 fans
x[1] <- 0                                                                                                                              # ... and a 0 to get started with `diff`
if(sum(x) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans) {                                                                     # Are there at least 3 successes?
max(diff(cumsum(x), lag=Number_of_Games_In_A_Row_With_Less_Than_17000_Fans)) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans   # Are there 3 successes in a row anywhere?
} else {
FALSE                                                                                                                                # Not enough successes for 8 in a row
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
1-average_simulation
##Input Each Required Variable
Number_Of_Games_In_Season <- 41
Number_Of_Games_In_Season <- Number_Of_Games_In_Season + 1
Probability_of_Not_Reaching_17000_Fans <- 1/4
Number_of_Games_In_A_Row_With_Less_Than_17000_Fans <- 3
##ACTUAL FUNCTION
hits8 <- function() {
x <- rbinom(Number_Of_Games_In_Season, 1, Probability_of_Not_Reaching_17000_Fans)                                                      # 41 Binomial trials with 25% of not having 17,000 fans
x[1] <- 0                                                                                                                              # ... and a 0 to get started with `diff`
if(sum(x) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans) {                                                                     # Are there at least 3 successes?
max(diff(cumsum(x), lag=Number_of_Games_In_A_Row_With_Less_Than_17000_Fans)) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans   # Are there 3 successes in a row anywhere?
} else {
FALSE                                                                                                                                # Not enough successes for 8 in a row
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
##ODDS OF AVOIDING A 3 GAME IN A ROW LESS THAN 17,000 FAN FOR 41 GAMES
1-average_simulation
##Copy and Paste Script into R or RSTUDIO
##Input Each Required Variable
Number_Of_Games_In_Season <- 41
Number_Of_Games_In_Season <- Number_Of_Games_In_Season + 1
Probability_of_Not_Reaching_17000_Fans <- 1/4
Number_of_Games_In_A_Row_With_Less_Than_17000_Fans <- 3
##ACTUAL FUNCTION
hits8 <- function() {
x <- rbinom(Number_Of_Games_In_Season, 1, Probability_of_Not_Reaching_17000_Fans)
x[1] <- 0
if(sum(x) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans) {
max(diff(cumsum(x), lag=Number_of_Games_In_A_Row_With_Less_Than_17000_Fans)) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans
} else {
FALSE
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
##ODDS OF AVOIDING A 3 GAME IN A ROW LESS THAN 17,000 FAN FOR 41 GAMES
1-average_simulation
##Copy and Paste Script into R or RSTUDIO
##Input Each Required Variable
Number_Of_Games_In_Season <- 41
Number_Of_Games_In_Season <- Number_Of_Games_In_Season + 1
Probability_of_Not_Reaching_17000_Fans <- 1/4
Number_of_Games_In_A_Row_With_Less_Than_17000_Fans <- 3
##ACTUAL FUNCTION
hits8 <- function() {
x <- rbinom(Number_Of_Games_In_Season, 1, Probability_of_Not_Reaching_17000_Fans)
x[1] <- 0
if(sum(x) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans) {
max(diff(cumsum(x), lag=Number_of_Games_In_A_Row_With_Less_Than_17000_Fans)) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans
} else {
FALSE
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
##ODDS OF AVOIDING A 3 GAME IN A ROW LESS THAN 17,000 FAN FOR 41 GAMES
1-average_simulation
install.packages('twitteR')
install.packages('syuzhet')
ifelse(n == 4, 2,
ifelse(n == 5, 3,
iflese(n == 6, 3,
iflese(n == 7, 4))))
n <- 4
ifelse(n == 4, 2,
ifelse(n == 5, 3,
iflese(n == 6, 3,
iflese(n == 7, 4))))
n <- 4
##Input Number of Home Games for Top Seed
Number_of_Home_Games_For_Top_Seed <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
iflese(n == 6, 3,
iflese(n == 7, 4))))
Number_of_Home_Games_For_Top_Seed
n <- 5
##Input Number of Home Games for Top Seed
Number_of_Home_Games_For_Top_Seed <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
iflese(n == 6, 3,
iflese(n == 7, 4))))
Number_of_Home_Games_For_Top_Seed
n <- 6
Number_of_Home_Games_For_Top_Seed <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
iflese(n == 6, 3,
iflese(n == 7, 4))))
Number_of_Home_Games_For_Top_Seed
n <- 6
Number_of_Home_Games_For_Top_Seed <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
iflese(n == 6, 3,
iflese(n == 7, 4))))
Number_of_Home_Games_For_Top_Seed <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
ifelse(n == 6, 3,
ifelse(n == 7, 4))))
Number_of_Home_Games_For_Top_Seed
n <- 7
##Input Number of Home Games for Top Seed
Number_of_Home_Games_For_Top_Seed <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
ifelse(n == 6, 3,
ifelse(n == 7, 4))))
Number_of_Home_Games_For_Top_Seed
k <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
ifelse(n == 6, 3,
ifelse(n == 7, 4))))
k
n!
factorial(n)
factorial(n)/(factorial(k)*factorial(n-k))
(factorial(n)/(factorial(k)*factorial(n-k)))*((p_H)^k)*((p_A)^(n-k))
p_H <- 0.97
##Probability of Winning Away Against Opponent for Top Seed
p_A <- 0.942
##Binomial Distribution to Determine Probability of
(factorial(n)/(factorial(k)*factorial(n-k)))*((p_H)^k)*((p_A)^(n-k))
p_H*p_H*P_A*P_A
p_H*p_H*p_A*p_A
source('~/.active-rstudio-document', echo=TRUE)
n-k
k
away_games <- n-k
((p_H)^k)*((p_A^away_games))
n <- 4
##Number of Home Games for Top Seed
k <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
ifelse(n == 6, 3,
ifelse(n == 7, 4))))
##Number of Away Games for Top Seed
away_games <- n-k
##Probability of Winning Home Against Opponent for Top Seed
p_H <- 0.97
##Probability of Winning Away Against Opponent for Top Seed
p_A <- 0.942
((p_H)^k)*((p_A^away_games))
resulting_probability_of_winning_series <- ((p_H)^k)*((p_A^away_games))
##Question 2B Simulator
##ROUND 1
##Input Number of Games Played
n <- 4
##Number of Home Games for Top Seed
k <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
ifelse(n == 6, 3,
ifelse(n == 7, 4))))
##Number of Away Games for Top Seed
away_games <- n-k
##Probability of Winning Home Against Opponent for Top Seed
p_H <- 0.58
##Probability of Winning Away Against Opponent for Top Seed
p_A <- 0.51
resulting_probability_of_winning_series <- ((p_H)^k)*((p_A^away_games))
resulting_probability_of_winning_series
##Question 2B Simulator
##ROUND 1
##Input Number of Games Played
n <- 5
##Number of Home Games for Top Seed
k <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
ifelse(n == 6, 3,
ifelse(n == 7, 4))))
##Number of Away Games for Top Seed
away_games <- n-k
##Probability of Winning Home Against Opponent for Top Seed
p_H <- 0.58
##Probability of Winning Away Against Opponent for Top Seed
p_A <- 0.51
resulting_probability_of_winning_series <- ((p_H)^k)*((p_A^away_games))
resulting_probability_of_winning_series
##Question 2B Simulator
##ROUND 1
##Input Number of Games Played
n <- 6
##Number of Home Games for Top Seed
k <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
ifelse(n == 6, 3,
ifelse(n == 7, 4))))
##Number of Away Games for Top Seed
away_games <- n-k
##Probability of Winning Home Against Opponent for Top Seed
p_H <- 0.58
##Probability of Winning Away Against Opponent for Top Seed
p_A <- 0.51
resulting_probability_of_winning_series <- ((p_H)^k)*((p_A^away_games))
resulting_probability_of_winning_series
##Question 2B Simulator
##ROUND 1
##Input Number of Games Played
n <- 7
##Number of Home Games for Top Seed
k <- ifelse(n == 4, 2,
ifelse(n == 5, 3,
ifelse(n == 6, 3,
ifelse(n == 7, 4))))
##Number of Away Games for Top Seed
away_games <- n-k
##Probability of Winning Home Against Opponent for Top Seed
p_H <- 0.58
##Probability of Winning Away Against Opponent for Top Seed
p_A <- 0.51
resulting_probability_of_winning_series <- ((p_H)^k)*((p_A^away_games))
resulting_probability_of_winning_series
rbinom(4, 2, 0.9)
p_H <- 0.58
p_A <- 0.51
6*((p_H)^2)*((p_A)^2)
10*((p_H)^3)*((p_A)^2)
20*((p_H)^3)*((p_A)^3)
35*((p_H)^4)*((p_A)^3)
4_games <- 6*((p_H)^2)*((p_A)^2)
four_games <- 6*((p_H)^2)*((p_A)^2)
five_games <- 10*((p_H)^3)*((p_A)^2)
six_games <- 20*((p_H)^3)*((p_A)^3)
seven_games <- 35*((p_H)^4)*((p_A)^3)
max(four_games, five_games, six_games, seven_games)
print(max(four_games, five_games, six_games, seven_games))
four_games <- data.frame(6*((p_H)^2)*((p_A)^2))
four_games
four_games_col <- data.frame(c("4 Games"))
cbind(four_games, four_games_col)
four_games1 <- cbind(four_games, four_games_col)
four_games_col <- data.frame(c(4))
four_games1 <- cbind(four_games, four_games_col)
four_games1
colnames(four_games1)[1]<-"Prob"
colnames(four_games1)[2]<-"Games"
four_games1
five_games <- data.frame(10*((p_H)^3)*((p_A)^2))
five_games_col <- data.frame(c(5))
five_games <- data.frame(10*((p_H)^3)*((p_A)^2))
five_games_col <- data.frame(c(5))
five_games1 <- cbind(five_games, five_games_col)
colnames(five_games1)[1]<-"Prob"
colnames(five_games1)[2]<-"Games"
five_games1
six_games <- data.frame(20*((p_H)^3)*((p_A)^3))
six_games <- data.frame(20*((p_H)^3)*((p_A)^3))
six_games_col <- data.frame(c(6))
six_games1 <- cbind(six_games, six_games_col)
colnames(six_games1)[1]<-"Prob"
colnames(six_games1)[2]<-"Games"
six_games1
seven_games <- data.frame(35*((p_H)^4)*((p_A)^3))
seven_games <- data.frame(35*((p_H)^4)*((p_A)^3))
seven_games <- data.frame(35*((p_H)^4)*((p_A)^3))
seven_games_col <- data.frame(c(7))
seven_games1 <- cbind(seven_games, seven_games_col)
colnames(seven_games1)[1]<-"Prob"
colnames(seven_games1)[2]<-"Games"
do.call(c(four_games1, five_games1, six_games1, seven_games1),rbind)
do.call(c(four_games1, five_games1, six_games1, seven_games1),"rbind")
do.call("rbind", list(four_games1, five_games1, six_games1, seven_games1))
probabilities <- do.call("rbind", list(four_games1, five_games1, six_games1, seven_games1))
order(probabilities)
probabilities <- probabilities[order(probabilities$Prob),]
probabilities
probabilities <- probabilities[order(-probabilities$Prob),]
probabilities
number_of_games <- probabilities[1,2]
number_of_games
ifelse(number_of_games == 4, 2,
ifelse(number_of_games == 5), 3,
ifelse(number_of_games == 6), 3,
ifelse(number_of_games == 7), 4, "ERROR")
number_of_games <- probabilities[1,2]
ifelse(number_of_games == 4, 2,
ifelse(number_of_games == 5), 3,
ifelse(number_of_games == 6), 3,
ifelse(number_of_games == 7), 4, "ERROR")
ifelse(number_of_games == 4, 2,
ifelse(number_of_games == 5), 3,
ifelse(number_of_games == 6), 3,
ifelse(number_of_games == 7), 4, 5)
k <- ifelse(number_of_games == 4, 2,
ifelse(number_of_games == 5, 3,
ifelse(number_of_games == 6, 3,
ifelse(number_of_games == 7, 4))))
Higher_Seed_Home_Games <- ifelse(number_of_games == 4, 2,
ifelse(number_of_games == 5, 3,
ifelse(number_of_games == 6, 3,
ifelse(number_of_games == 7, 4))))
Higher_Seed_Home_Games
Higher_Seed_Home_Games <- ifelse(number_of_games == 4, 2,
ifelse(number_of_games == 5, 3,
ifelse(number_of_games == 6, 3,
ifelse(number_of_games == 7, 4))))
Lower_Seed_Home_Games <- number_of_games - Higher_Seed_Home_Games
Lower_Seed_Home_Games
Higher_Seed_Revenue <- Higher_Seed_Home_Games*2756446
Lower_Seed_Revenue <- Lower_Seed_Home_Games*1437278
Total_Series_Revenue <- sum(Higher_Seed_Revenue, Lower_Seed_Revenue)
Total_Series_Revenue
factorial(4)
(factorial(4))/(factorial(4)*factorial(4-4))
4^0
((factorial(4))/(factorial(4)*factorial(4-4)))*(.58)^4*(0.58)^(4-4)*(0.51)^3
##Input Each Required Variable
Number_Of_Games_In_Season <- 41
Number_Of_Games_In_Season <- Number_Of_Games_In_Season + 1
Probability_of_Not_Reaching_17000_Fans <- 1/4
Number_of_Games_In_A_Row_With_Less_Than_17000_Fans <- 3
##ACTUAL FUNCTION
hits8 <- function() {
x <- rbinom(Number_Of_Games_In_Season, 1, Probability_of_Not_Reaching_17000_Fans)                                                      # 41 Binomial trials with 25% of not having 17,000 fans
x[1] <- 0                                                                                                                              # ... and a 0 to get started with `diff`
if(sum(x) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans) {                                                                     # Are there at least 3 successes?
max(diff(cumsum(x), lag=Number_of_Games_In_A_Row_With_Less_Than_17000_Fans)) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans   # Are there 3 successes in a row anywhere?
} else {
FALSE                                                                                                                                # Not enough successes for 3 in a row
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
##ODDS OF AVOIDING A 3 GAME IN A ROW LESS THAN 17,000 FAN FOR 41 GAMES
1-average_simulation
##Input Each Required Variable
Number_Of_Games_In_Season <- 41
Number_Of_Games_In_Season <- Number_Of_Games_In_Season + 1
Probability_of_Not_Reaching_17000_Fans <- 0.146
Number_of_Games_In_A_Row_With_Less_Than_17000_Fans <- 3
##ACTUAL FUNCTION
hits8 <- function() {
x <- rbinom(Number_Of_Games_In_Season, 1, Probability_of_Not_Reaching_17000_Fans)                                                      # 41 Binomial trials with 25% of not having 17,000 fans
x[1] <- 0                                                                                                                              # ... and a 0 to get started with `diff`
if(sum(x) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans) {                                                                     # Are there at least 3 successes?
max(diff(cumsum(x), lag=Number_of_Games_In_A_Row_With_Less_Than_17000_Fans)) >= Number_of_Games_In_A_Row_With_Less_Than_17000_Fans   # Are there 3 successes in a row anywhere?
} else {
FALSE                                                                                                                                # Not enough successes for 3 in a row
}
}
set.seed(17)
average_simulation <- mean(replicate(10^5, hits8()))
##ODDS OF AVOIDING A 3 GAME IN A ROW LESS THAN 17,000 FAN FOR 41 GAMES
1-average_simulation
library("httr")
library("jsonlite")
library(DT)
library(dplyr)
spotifyKey <- "c432b36c21724d2989baf7d4d8a6bfd3"
spotifySecret <- "047d74d4926c44ec8681c236d702dff9"
response = POST(
'https://accounts.spotify.com/api/token',
accept_json(),
authenticate(spotifyKey, spotifySecret),
body = list(grant_type = 'client_credentials'),
encode = 'form',
verbose()
)
token = content(response)$access_token
HeaderValue = paste0('Bearer ', token)
```
```{r, echo=FALSE, include=FALSE}
new_releases_url <- "https://api.spotify.com/v1/browse/new-releases"
getNewReleases <- GET(new_releases_url, add_headers(Authorization = HeaderValue))
newReleasesContent <- jsonlite::fromJSON(toJSON(content(getNewReleases)))
newreleases<-data.frame(matrix(unlist(newReleasesContent$albums$items$id),
nrow=newReleasesContent$albums$total, byrow=T),stringsAsFactors=FALSE)
spotify<-newreleases[1:30,]
head(spotify)
head(data.frame(spotify))
test<-data.frame(spotify))
test<-data.frame(spotify)
test
library(RODBC)
install.packages('RODBC')
library(RODBC)
sqlSave(ConnectionDB, test, tablename =
"dbo.spotify_table",rownames=FALSE, append = TRUE)
sqlSave('ConnectionDB', test, tablename =
"dbo.spotify_table",rownames=FALSE, append = TRUE)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=SQLExpress;database=ConnectionDB;trusted_connection=true')
sqlSave(dbhandle, test, tablename =
"dbo.spotify_table",rownames=FALSE, append = TRUE)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=.\SQLExpress;database=ConnectionDB;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server=SQLEXPRESS;database=ConnectionDB;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQLEXPRESS};server=SQLEXPRESS;database=ConnectionDB;trusted_connection=true')
setwd("~/website")
setwd("~/website/r-projects")
setwd("~/website/r-projects")
#render your sweet site.
rmarkdown::render_site()
